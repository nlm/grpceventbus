// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: eventpb/event.proto

package eventpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (Api_PublishClient, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Api_SubscribeClient, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Api_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[0], "/Api/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiPublishClient{stream}
	return x, nil
}

type Api_PublishClient interface {
	Send(*PublishRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type apiPublishClient struct {
	grpc.ClientStream
}

func (x *apiPublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiPublishClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Api_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[1], "/Api/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type apiSubscribeClient struct {
	grpc.ClientStream
}

func (x *apiSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	Publish(Api_PublishServer) error
	Subscribe(*SubscribeRequest, Api_SubscribeServer) error
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) Publish(Api_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedApiServer) Subscribe(*SubscribeRequest, Api_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).Publish(&apiPublishServer{stream})
}

type Api_PublishServer interface {
	SendAndClose(*Empty) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type apiPublishServer struct {
	grpc.ServerStream
}

func (x *apiPublishServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiPublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Api_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).Subscribe(m, &apiSubscribeServer{stream})
}

type Api_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type apiSubscribeServer struct {
	grpc.ServerStream
}

func (x *apiSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Api",
	HandlerType: (*ApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Api_Publish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Api_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventpb/event.proto",
}
